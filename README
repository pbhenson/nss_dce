DCE Naming Services for Solaris -- Copyright (c) 1997-2000 Paul Henson
----------------------------------------------------------------------

Introduction
------------

nss_dce is a package that integrates DCE into the Solaris naming services
switch architecture. It allows you to specify "dce" as a source in the
/etc/nsswitch.conf file for passwd, shadow and group lookups, removing the
need to duplicate your security registry in local passwd and group files.


Installation
------------

If you wish to change the compiler used (defaults to gcc), enable
debugging, or enable sequential passwd/shadow/group lookups, edit the
Makefile. Turning on debugging in the daemon enables verbose debugging
output via syslog with priority DEBUG. Turning on debugging in the shared
library will generate messages to stderr when clients use the naming
service. Please note that if you change the default C compiler, you will
likely need to edit the Makefile in the nss_dce.so directory and modify the
options for generating position independent code and shared libraries.

Typing "make" will compile the shared library, the daemon, and some test
programs.

Modify your /etc/nsswitch.conf file to include "dce" as a source for
passwd and group information. For example,

  passwd:     files dce
  group:      files dce


When you're ready to install the naming services, type "make install".
Note: you must be logged in as root for make install to succeed. This
will copy nss_dced to /usr/sbin, and nss_dce.so.1 to /usr/lib. Note:
this will remove Transarc's existing /usr/lib/nss_dce.so.1 symlink,
which must be replaced if you want to reenable Transarc's bundled naming
services integration. It will also copy S15-80nss_dced to /etc/rc3.d,
which will start nss_dced at boot.

To help prevent failure, once nss_dced detaches from the parent process, it
spawns a child to handle naming service requests. The original nss_dced
process monitors the child, and spawns a new child if the original should
die. nss_dced logs activity to syslog via the DAEMON facility, and the ERR
and NOTICE priorities. If debugging was enabled at compile time, nss_dced
also logs detailed debugging information at the DEBUG priority.

The PID of the parent nss_dced process is logged to
/opt/dcelocal/var/security/.nss_dced.pid. If the parent receives either a
SIGHUP or a SIGTERM, it will kill the child and exit.


Shadow Support Details
----------------------

Version 2.5 of nss_dce now supports the getsp* naming service functions.
These functions return data in the following structure, as defined in
shadow.h:

          struct spwd{
                  char *sp_namp;          /* login name */
                  char *sp_pwdp;          /* encrypted passwd */
                  long sp_lstchg;         /* date of last change */
                  long sp_min;            /* min days to passwd change */
                  long sp_max;            /* max days to passwd change*/
                  long sp_warn;           /* warning period */
                  long sp_inact;          /* max days inactive */
                  long sp_expire;         /* account expiry date */
                  unsigned long sp_flag;  /* not used */
          };


The following describes the mapping used by nss_dce to provide this data
for a given account:

    sp_namp     DCE principal name

    sp_pwdp     passwd field of sec_rgy_acct_user_t structure as returned
                by sec_rgy_account_lookup

    sp_lstchg   passwd_dtm field of sec_rgy_acct_user_t structure as
                returned by sec_rgy_account_lookup converted to days

    sp_min      NSS_DCED_SP_MIN defined at compile time in nss_dced.h,
                defaults to -1

    sp_max      passwd_lifetime field of sec_rgy_plcy_t structure as
                returned by sec_rgy_plcy_get_info. Note that this is
                the general registry policy, and does not reflect any
                specific policy that might apply to the given principal.
                If policy lookup fails, it uses NSS_DCED_PASSWD_LIFETIME
                defined at compile time in nss_dced.h, which defaults
                to 0

    sp_warn     NSS_DCED_SP_WARN defined at compile time in nss_dced.h,
                defaults to -1

    sp_inact    NSS_DCED_SP_INACT defined at compile time in nss_dced.h,
                defaults to -1

    sp_expire   expiration_date field of sec_rgy_acct_admin_t structure
                as returned by sec_rgy_account_lookup converted to days

    sp_flag     unused, set to 0


nss_dce allows any user to make getsp* calls to acquire shadow entries for
DCE principals, unlike the shadow file backend, which allows only root to
retrieve shadow entries. By default, the DCE security registry does not
return a Unix-format hashed password. The registry can be configured to
return the hashed password, which would allow complete plug-and-play
support for applications that authenticate via the shadow password
interface. However, enabling return of hashed passwords from the registry
will allow any user to acquire them through getsp* calls as well as
through rgy_edit, dcecp, or direct use of the DCE security API. Generally,
this has undesirable security implications. 


FAQs
----

Transarc's DCE/DFS 2.0 for Solaris 2.6 comes bundled with naming services
integration. Why would I want to use nss_dce?

     Currently, nss_dce performs noticeably better than the
     Transarc-bundled naming services. Also, nss_dce allows you to
     disable resource-intensive sequential lookups. Transarc recommends
     disabling nscd when using their naming services, which prevents
     caching, while there have been no reported problems with nscd
     and nss_dce. Finally, nss_dce comes with source code, allowing you
     to modify it to suit local needs.

     Transarc's naming services do include some features not available
     in nss_dce; for example, the ability to use a different cell's
     registry for lookups. They also plan to add options to disable
     sequential lookups and address other performance issues. However,
     unless you need one of Transarc's features nss_dce doesn't support,
     I'd recommend nss_dce for now.


What's the deal with this daemon? I thought you just needed a shared library?

     The Solaris naming services switch works by mapping shared libraries
     into the address space of the process making the naming service lookup
     call. Unfortunately, the address space of many processes is not
     compatible with the thread calls made by DCE. In particular, there are
     pthread_* routines in libdce that also exist in libc. To avoid
     conflicts, the shared library portion of this package uses only
     innocuous socket calls to connect via a unix domain socket to the
     daemon, which performs the actual DCE calls in its own address
     space. This approach avoids possible conflicts, and I believe is
     similar to the approach used by IBM in their AIX DCE integration.


What performance impact will this have on my system?

     Using DCE for naming services should not decrease your performance
     by too great a degree as long as you are running the Solaris naming
     service cache daemon (nscd). The first lookup of a particular name
     or id will take slightly more time than an equivalent lookup in a
     local passwd file (although, depending on the size of your local
     passwd file, a DCE lookup might actually be more efficient), but
     once the entry is in the cache, access is extremely quick. Please
     see the manual page for nscd.conf for details on reconfiguring
     nscd to best meet your needs.
     

Why don't the group lookup routines fill in the gr_mem section of the group
structure?

     In my DCE environment, a group could have potentially hundreds or
     even thousands of members. The memory management needed to pass
     such lists of group members around would be a nightmare. I don't think
     that these calls will be used that often for determining group
     membership, and decided not to support the gr_mem functionality of
     the group structure. If you direly need this functionality, feel free
     to provide feedback.


Changes
-------

Version 2.5

     - Added support for shadow backend. Be sure to read the section of
       this README about shadow support for implementation details and
       security implications.


Version 2.1

     - Modified nss_dced to always leave at least one group slot open for
       the DFS PAG. Note that if groups are supplied by other naming
       sources than DCE, you might still fill up all available group slots.


Version 2.0

     - Updates for Solaris 2.6. This version introduces no functional
       changes, only new compiler flags appropriate for Solaris 2.6. This
       version should not be used with Solaris 2.5[.1].


Version 1.6

     - This release is dedicated to Paul Hilchey <hilchey@ucs.ubc.ca>, who
       suggested all of the following fixes/improvements.

     - Fixed memory management problem in client, which was occasionally
       causing corrupted entries to be returned if nscd was running.

     - Added check in the client to see if the PID of the calling process
       is the same as the PID of the process that instantiated this
       client. If not, create a new connection to the daemon. Inheritance
       of connections from parent to children was causing problems with
       cron.

     - Added compile-time option to disable sequential passwd/group lookups
       (getpwent, getgrent). By default the option disables sequential
       lookups. To enable them, edit the Makefile before compiling.

     - Revamped client to remove redundant code.


Version 1.5

     - Turned nss_dced into a true daemon. It now detaches from its parent
       process and controlling terminal and runs in the background. Thanks
       to Mark Horn <mhorn@funb.com> for the suggestion.

     - Added support for group membership requests, allowing initgroups()
       to function correctly. Previous versions of nss_dce failed to return
       the supplementary group membership information, preventing
       initialization of the group list. Thanks to Martin Arlt
       <arlt@dik.maschinenbau.tu-darmstadt.de> for pointing out this
       deficiency.

     - Added syslog support to nss_dced, in place of previous stderr based
       logging. nss_dced will log errors and problems via the facility
       DAEMON and the priorities ERR and NOTICE. If debugging is enabled at
       compile time, nss_dced will also log debugging information via the
       priority DEBUG.

     - Increased fault tolerance of nss_dced. nss_dced will now spawn a
       child to handle naming service requests, and monitor that child
       for failure. If the child dies or exits, nss_dced will spawn a new
       child and log the failure. If children are respawning too rapidly,
       nss_dced will sleep for a period to avoid causing a high system
       load. Sending a SIGHUP or SIGTERM to the parent will cause it to
       kill the child and exit cleanly. The parent logs its PID to
       /opt/dcelocal/var/security/.nss_dced.pid.

     - Included S15-80nss_dced script to start nss_dced at boot.


Version 1.1

     - Modified DCE registry calls to use the default handle rather than
       explicitly binding to a particular server. The default handle is
       automatically maintained by the RPC backend, and will transparently
       rebind if the current security server fails. This should increase
       the reliability and fault tolerance of nss_dced.

     - Minor optimizations to code and protocol.

     - New test programs that more closely mirror the underlying libc calls.


Version 1.0

     - Moved default socket location from /tmp to /opt/dcelocal/var/security
       for security reasons. (Thanks to Ben Cox of Transarc for suggestion)

     - Added check to avoid potential buffer overflow in nss_dced if a
       malicious client passed an oversize query string.

     - Cleaned up error handling in nss_dced, which wasn't handling
       unexpected errors (in particular sec_rgy_not_authorized) very
       well.


Version 0.5

     - First publicly released version.


Feedback/Availability
---------------------

Please report any bugs or feature requests to <henson@acm.org>.


The latest version of nss_dce is currently available at

http://www.csupomona.edu/~henson/www/projects/nss_dce/
