DCE Naming Services for Solaris -- Copyright (c) 1997 Paul Henson
-----------------------------------------------------------------

Introduction
------------

nss_dce is a package that integrates DCE into the Solaris naming services
switch architecture. It allows you to specify "dce" as a source in the
/etc/nsswitch.conf file for passwd and group lookups, removing the need
to duplicate your security registry in local passwd and group files.


Installation
------------

If you wish to change the compiler used (defaults to gcc), or enable
debugging, edit the Makefile. Turning on debugging in the daemon enables
the -d option, which will cause the daemon to verbosely log activity to
stderr. Turning on debugging in the shared library will generate messages
to stderr when clients use the naming service. Please note that if you
change the default C compiler, you will likely need to edit the Makefile
in the nss_dce.so directory and modify the options for generating
position independent code and shared libraries.

Typing "make" will compile the shared library, the daemon, and a few
simple test programs.

Modify your /etc/nsswitch.conf file to include "dce" as a source for
passwd and group information. For example,

  passwd:     files dce
  group:      files dce


If you'd like to test the naming services before installing them system
wide, start the daemon by hand, and add the nss_dce.so directory to
your LD_LIBRARY_PATH. Note that you can not test the naming services
without installing them if you are running nscd. Be sure to kill nscd
before your test. For example,

  /etc/init.d/nscd stop
  /path/to/nss_dce-0.5/nss_dced &
  setenv LD_LIBRARY_PATH /path/to/nss_dce-0.5/nss_dce.so:${LD_LIBRARY_PATH}


You should now be able to use the test programs in the tests directory to
look up passwd and group information from DCE.

When you're ready to install the naming services, type "make install".
(Note, you must be logged in as root for make install to succeed) This
will copy nss_dced to /usr/sbin, and nss_dce.so.1 to /usr/lib. If you
previously tested the service by running the daemon by hand, be sure to
kill it now, and restart nscd.

The daemon *must* be running for the naming service to function. While
I've done my best to make the daemon robust, I can not guarantee that
it will never die :). If you run DFS, I strongly recommend adding the
daemon as a bosserver process. This has two advantages. First, it
guarantees that the daemon will be started *after* DCE initializes,
but *before* any rc3.d scripts run that might rely on naming services.
Second, if for some reason the daemon does die, the bosserver will
automatically restart it. To add the daemon as a bosserver process,
execute the following command (please note your DCE identity must be
on the admin.bos list for the host for the command to succeed):

  bos create -server /.:/hosts/hostname -process nss_dced -type simple \
    -cmd /usr/sbin/nss_dced


If you're not running the bosserver, you can start the daemon from an rc3.d
script that runs after DCE, but before anything that relies on naming
services. However, if the daemon dies, and your script doesn't restart
it, you will lose integration. The daemon should not die, but I'm paranoid,
ok?


FAQs
----

What's the deal with this daemon? I thought you just needed a shared library?

     The Solaris naming services switch works by mapping shared libraries
     into the address space of the process making the naming service lookup
     call. Unfortunately, the address space of many processes is not
     compatible with the thread calls made by DCE. In particular, there are
     pthread_* routines in libdce that also exist in libc. To avoid
     conflicts, the shared library portion of this package uses only
     innocuous socket calls to connect via a unix domain socket to the
     daemon, which performs the actual DCE calls in its own address
     space. This approach avoids possible conflicts, and I believe is
     similar to the approach used by IBM in their AIX DCE integration.


What performance impact will this have on my system?

     Using DCE for naming services should not decrease your performance
     by too great a degree as long as you are running the Solaris naming
     service cache daemon (nscd). The first lookup of a particular name
     or id will take slightly more time than an equivalent lookup in a
     local passwd file (although, depending on the size of your local
     passwd file, a DCE lookup might actually be more efficient), but
     once the entry is in the cache, access is extremely quick. Please
     see the manual page for nscd.conf for details on reconfiguring
     nscd to best meet your needs.
     

Why don't the group lookup routines fill in the gr_mem section of the group
structure?

     In my DCE environment, a group could have potentially hundreds or
     even thousands of members. The memory management needed to pass
     such lists of group members around would be a nightmare. I don't think
     that these calls will be used that often for determining group
     membership, and decided not to support the gr_mem functionality of
     the group structure. Feel free to complain if this lack bothers you.


Changes
-------

Version 0.5

     First publicly released version.


Contributors
------------

Dr. Craig Rich, Intranet Project Director, Cal Poly Pomona

     Vision and design of the Cal Poly Pomona Intranet Project
     (http://www.csupomona.edu/intranet/), which inspired the creation
     of this package.


Mike Fitzgerald, Senior Systems Engineer, Transarc Corporation

     Supplied example source code illustrating the Solaris naming
     services switch architecture and interface.


Feedback/Availability
---------------------

Please report any bugs or feature requests to <henson@acm.org>.


The latest version of nss_dce is currently available at

http://www.intranet.csupomona.edu/~henson/www/projects/nss_dce/
